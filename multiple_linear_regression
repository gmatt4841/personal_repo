import pandas as pd 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Lasso, Ridge, LassoCV, BayesianRidge
import statsmodels.formula.api as sm
import matplotlib.pylab as plt 
from dmba import regressionSummary, exhaustive_search
from dmba import backward_elimination, forward_selection, stepwise_selection
from dmba import adjusted_r2_score, AIC_score, BIC_score


car_df = pd.read_csv('/Users/matthewgarcia/Documents/ToyotaCorolla.csv', encoding='ISO-8859-1')
car_df = car_df.iloc[0:1000]

predictors = ['Age_08_04', 'KM', 'Fuel_Type', 'HP', 'Met_Color', 'Automatic', 'CC', 'Doors', 'Quarterly_Tax', 'Weight']

outcome = 'Price'

#partition data 
X= pd.get_dummies(car_df[predictors], drop_first=True)
y = car_df[outcome]
train_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.4, random_state=1)

car_lm = LinearRegression()
car_lm.fit(train_X, train_y)

#print coefficients 
print(pd.DataFrame({'Predictor': X.columns, 'coefficient': car_lm.coef_}))

#print performance measures (training data)
regressionSummary(train_y, car_lm.predict(train_X)) 

#use predict() to make predictions on a new set 
car_lm_pred = car_lm.predict(valid_X)

result = pd.DataFrame({'Predicted': car_lm_pred, 'Actual': valid_y, 'Residual': valid_y - car_lm_pred})
print(result.head(20))

#print performance measures (validation data)
regressionSummary(valid_y, car_lm_pred)

#exhaustive search for reducing predictors 
def train_model (variables):
    model = LinearRegression()
    model.fit(train_X[list(variables)], train_y)
    return model 

def score_model (model, variables):
    pred_y= model.predict(train_X[list(variables)])
    # we negate as score is optimized to be as low as possible 
    return -adjusted_r2_score(train_y, pred_y, model)

allVariables = train_X.columns
results = exhaustive_search(allVariables, train_model, score_model)

data = []
for result in results: 
    model = result['model']
    variables = list(result['variables'])
    AIC = AIC_score(train_y, model.predict(train_X[variables]), model)

    d = {'n': result['n'], 'r2adj': -result['score'], 'AIC': AIC}
    d.update({var: var in result['variables'] for var in allVariables})
    data.append(d)

results_1 = pd.DataFrame(data, columns=('n', 'r2adj', 'AIC') +tuple(sorted(allVariables))) 
print(results_1)